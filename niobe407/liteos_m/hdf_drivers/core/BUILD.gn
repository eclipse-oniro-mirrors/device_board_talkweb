# Copyright (c) 2023 Talkweb Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//drivers/hdf_core/adapter/khdf/liteos_m/hdf.gni")

module_switch = defined(LOSCFG_DRIVERS_HDF)
module_name = get_path_info(rebase_path("."), "name")

hdf_driver(module_name) {
  if (defined(LOSCFG_SOC_SERIES_STM32F4xx)) {
    sources = [
      "//drivers/hdf_core/adapter/khdf/liteos_m/core/common/src/devmgr_service_start.c",
      "//drivers/hdf_core/adapter/khdf/liteos_m/core/common/src/devsmall_object_config.c",
      "//drivers/hdf_core/adapter/khdf/liteos_m/core/common/src/hdf_device_node_ext.c",
      "//drivers/hdf_core/framework/core/host/src/devhost_service.c",
      "//drivers/hdf_core/framework/core/host/src/devmgr_service_clnt.c",
      "//drivers/hdf_core/framework/core/host/src/devsvc_manager_clnt.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_device.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_device_node.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_device_object.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_device_token.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_driver_loader.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_observer_record.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_service_observer.c",
      "//drivers/hdf_core/framework/core/host/src/hdf_service_subscriber.c",
      "//drivers/hdf_core/framework/core/host/src/power_state_token.c",
      "//drivers/hdf_core/framework/core/manager/src/devhost_service_clnt.c",
      "//drivers/hdf_core/framework/core/manager/src/device_token_clnt.c",
      "//drivers/hdf_core/framework/core/manager/src/devmgr_service.c",
      "//drivers/hdf_core/framework/core/manager/src/devsvc_manager.c",
      "//drivers/hdf_core/framework/core/manager/src/driver_manager.c",
      "//drivers/hdf_core/framework/core/manager/src/hdf_driver_installer.c",
      "//drivers/hdf_core/framework/core/manager/src/hdf_host_info.c",
      "//drivers/hdf_core/framework/core/manager/src/power_state_token_clnt.c",
      "//drivers/hdf_core/framework/core/shared/src/hdf_device_info.c",
      "//drivers/hdf_core/framework/core/shared/src/hdf_object_manager.c",
      "//drivers/hdf_core/framework/core/shared/src/hdf_service_record.c",
      "//drivers/hdf_core/framework/utils/src/hdf_cstring.c",
      "//drivers/hdf_core/framework/utils/src/hdf_map.c",
      "//drivers/hdf_core/framework/utils/src/hdf_sbuf.c",
      "//drivers/hdf_core/framework/utils/src/hdf_sbuf_impl_raw.c",
      "//drivers/hdf_core/framework/utils/src/hdf_slist.c",
      "//drivers/hdf_core/framework/utils/src/hdf_sref.c",
    ]
  }

  if (defined(LOSCFG_DRIVERS_HDF_CONFIG_MACRO)) {
    sources +=
        [ "//drivers/hdf_core/framework/core/common/src/hdf_attribute_macro.c" ]
  }

  if (defined(LOSCFG_DRIVERS_HDF_CONFIG_MACRO)) {
    HDF_HCS_BUILD_PATH = rebase_path("../../hdf_config")
    cmd = "if [ -f ${HDF_HCS_BUILD_PATH}/BUILD.gn ]; then echo true; else echo false; fi"
    HAVE_HCS_BUILD_PATH =
        exec_script("//build/lite/run_shell_cmd.py", [ cmd ], "value")
    if (HAVE_HCS_BUILD_PATH) {
      deps = [ "${HDF_HCS_BUILD_PATH}" ]
    }
  }
}
