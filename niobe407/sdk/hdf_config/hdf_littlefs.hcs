#include "device_littlefs_info.hcs"
root {
    platform {
    
        /*gpio_config {
            match_attr = "gpio_config_spi";
            pin = [ 1, 2, 3, 4, 5, 6, 7];   // pin index when register to hdf framework
            realPin = [ 5, 5, 4, 15, 12, 2, 12];       // pa5 clc mosi:pb5 miso:pb4 cs:pa15
            group = [ 0, 1, 1, 0, 2, 3, 6];          // group of gpio 0:GPIOA 1:GPIOB 2:GPIOC 3:GPIOD 4:GPIOE 5: GPIOF 6:GPIOG 7:GPIOH 8:GPIOI
			mode = [ 2, 2, 2, 1, 2, 2, 1];           // 0: input 1: output 2:alternate 3:analog  
            speed = [ 3, 3, 3, 3, 3, 3, 3];          // 0: low 1: middle 2:high 3:very_high
            pull = [ 0, 0, 0, 0, 1, 1, 2];           // 0: nopull 1:up 2:down
            pinNum = 7;                     // 如果发现因为加载的gpio个数过多导致无法申请到锁资源，可修改target_config.h中的LOSCFG_BASE_IPC_MUX_LIMIT 增大锁的数量限制
            output = [ 0, 0, 0, 0, 0, 0, 0];         // 0:pushpull 1:opendrain
            alternate = [ 5, 5, 5, 0, 8, 8, 0];
        }
        gpio_config {
            match_attr = "gpio_config_spi";
            pin = [ 1, 2, 3, 4, 5, 6 ];   // pin index when register to hdf framework
            realPin = [ 5, 5, 4, 15, 10, 11];       // pa5 clc mosi:pb5 miso:pb4 cs:pa15
            group = [ 0, 1, 1, 0, 2, 2];          // group of gpio 0:GPIOA 1:GPIOB 2:GPIOC 3:GPIOD 4:GPIOE 5: GPIOF 6:GPIOG 7:GPIOH 8:GPIOI
			mode = [ 2, 2, 2, 1, 2, 2];           // 0: input 1: output 2:alternate 3:analog  
            speed = [ 3, 3, 3, 3, 3, 3];          // 0: low 1: middle 2:high 3:very_high
            pull = [ 0, 0, 0, 0, 1, 1];           // 0: nopull 1:up 2:down
            pinNum = 6;                     // 如果发现因为加载的gpio个数过多导致无法申请到锁资源，可修改target_config.h中的LOSCFG_BASE_IPC_MUX_LIMIT 增大锁的数量限制
            output = [ 0, 0, 0, 0, 0, 0];         // 0:pushpull 1:opendrain
            alternate = [ 5, 5, 5, 0, 8, 8];
        }*/
        gpio_config {
            match_attr = "gpio_config_spi";
            pin = [ 1, 2, 3, 4, 5, 6 ];   // pin index when register to hdf framework
            realPin = [ 5, 5, 4, 15, 6, 7];       // pa5 clc mosi:pb5 miso:pb4 cs:pa15  usart1 tx pb6, rx:pb7
            group = [ 0, 1, 1, 0, 1, 1];          // group of gpio 0:GPIOA 1:GPIOB 2:GPIOC 3:GPIOD 4:GPIOE 5: GPIOF 6:GPIOG 7:GPIOH 8:GPIOI
			mode = [ 2, 2, 2, 1, 2, 2];           // 0: input 1: output 2:alternate 3:analog  
            speed = [ 3, 3, 3, 3, 3, 3];          // 0: low 1: middle 2:high 3:very_high
            pull = [ 0, 0, 0, 0, 1, 1];           // 0: nopull 1:up 2:down
            pinNum = 6;                     // 如果发现因为加载的gpio个数过多导致无法申请到锁资源，可修改target_config.h中的LOSCFG_BASE_IPC_MUX_LIMIT 增大锁的数量限制
            output = [ 0, 0, 0, 0, 0, 0];         // 0:pushpull 1:opendrain
            alternate = [ 5, 5, 5, 0, 7, 7];      // usart 1  af_7
        }
        spi_config {
            match_attr = "spi_w25q_config";
			busNum = 0;
			csNum = 0;
			transDir = 0;  // 0: TW_HAL_SPI_FULL_DUPLEX 1: TW_HAL_SPI_SIMPLEX_RX 2: TW_HAL_SPI_HALF_DUPLEX_RX 3: TW_HAL_SPI_HALF_DUPLEX_TX
			transMode = 1; // 1: normal 0:dma
			smMode = 1;      //  0: slave 1: master
			dataWidth = 0; // 0:8bit 1:16bit
			clkMode = 0;   // 0: cpol 0 cpha 0  1:CPOL = 1; CPHA = 0 2:CPOL = 0; CPHA = 1 3:CPOL = 1; CPHA = 1
			nss = 0;       // 0:NSS SOFT 1: NSS HARDWARE INPUT 2: NSS HARDWARE OUTPUT
			baudRate = 1; // 0:div2 1:div4 2:div8 3:div16 4:div32 5:div64 6:div128 6:div256
			bitOrder = 0; // 0: MSB first 1: LSB first
			crcEnable = 0; // 0: crc disable 1: crc enable
			crcPoly = 10;  // Min_Data = 0x00 and Max_Data = 0xFFFF
			spix = 0;   // 0: spi1  1: spi2  2:spi3
			csPin = 15;
			csGpiox = 0;
			standard = 0; // 0:motorola 1: ti
			dummyByte = 255;
        }
        /*uart_config4 {
            match_attr = "uart_config4";
            num = 4;     // 1 :uart1 2: USART2 3:USART3 4:UART4 5:UART5 6:USART6
            baudRate = 115200; // baudrate
            dataWidth =  0; // 0:8bit 1:9bit
            stopBit = 1; // 0:0.5stop bits  1:1 stop bit 2:1.5 stop bits 2:2 stop bits
            parity = 0;   // 0: none 1: event 2:odd
            transDir = 3; // 0: dir none  1: rx  2: tx 3:tx and rx
            flowCtrl = 0; // 0: no flowcontrl  1: flowContorl RTS  2: flowControl CTS 3: flowControl RTS AND CTS
            overSimpling = 0; // 0: overSimpling 16bits  1: overSimpling 8bits
            idleIrq = 1;   // 0: disable idle irq  1: enable idle irq
            transMode = 0; // 0:block 1:noblock 2:TX DMA RX NORMAL  3:TX NORMAL  RX DMA 4: USART_TRANS_TX_RX_DMA
            maxBufSize = 1024;
            uartType = 0; // 0 : 232 1: 485
            uartDePin = 0;  // usart 485 pin
            uartDeGroup = 0; // usart 485 control line
        }*/
        uart_config1 {
            match_attr = "uart_config1";
            num = 1;     // 1 :usart1 2: USART2 3:USART3 4:UART4 5:UART5 6:USART6
            baudRate = 115200; // baudrate
            dataWidth =  0; // 0:8bit 1:9bit
            stopBit = 1; // 0:0.5stop bits  1:1 stop bit 2:1.5 stop bits 2:2 stop bits
            parity = 0;   // 0: none 1: event 2:odd
            transDir = 3; // 0: dir none  1: rx  2: tx 3:tx and rx
            flowCtrl = 0; // 0: no flowcontrl  1: flowContorl RTS  2: flowControl CTS 3: flowControl RTS AND CTS
            overSimpling = 0; // 0: overSimpling 16bits  1: overSimpling 8bits
            idleIrq = 1;   // 0: disable idle irq  1: enable idle irq
            transMode = 0; // 0:block 1:noblock 2:TX DMA RX NORMAL  3:TX NORMAL  RX DMA 4: USART_TRANS_TX_RX_DMA
            maxBufSize = 1024;
            uartType = 0; // 0 : 232 1: 485
            uartDePin = 0;  // usart 485 pin
            uartDeGroup = 0; // usart 485 control line
        }
        /*uart_config5 {
            match_attr = "uart_config5";
            num = 5;     // 1 :uart1 2: USART2 3:USART3 4:UART4 5:UART5 6:USART6
            baudRate = 115200; // baudrate
            dataWidth =  0; // 0:8bit 1:9bit
            stopBit = 1; // 0:0.5stop bits  1:1 stop bit 2:1.5 stop bits 2:2 stop bits
            parity = 0;   // 0: none 1: event 2:odd
            transDir = 3; // 0: dir none  1: rx  2: tx 3:tx and rx
            flowCtrl = 0; // 0: no flowcontrl  1: flowContorl RTS  2: flowControl CTS 3: flowControl RTS AND CTS
            overSimpling = 0; // 0: overSimpling 16bits  1: overSimpling 8bits
            idleIrq = 1;   // 0: disable idle irq  1: enable idle irq
            transMode = 0; // 0:block 1:noblock 2:TX DMA RX NORMAL  3:TX NORMAL  RX DMA 4: USART_TRANS_TX_RX_DMA
            maxBufSize = 1024;
            uartType = 0; // 0 : 232 1: 485
            uartDePin = 12;  // usart 485 pin
            uartDeGroup = 6; // usart 485 control line
        }*/
    }
    //misc {
    //    littlefs_config {
    //        match_attr = "littlefs_config";
    //        mount_points = ["/talkweb","/niobe","/esp"];
    //        partitions = [0x800000,0x1200000,0x1400000];
    //        block_size = [4096,2048,2048];
    //        block_count = [1024,1024,1024];
    //    }
	//}
	misc {
        littlefs_config {
            match_attr = "littlefs_config";
            mount_points = ["/talkweb"];
            partitions = [0x800000];
            block_size = [4096];
            block_count = [2048];
        }
	}
}


